// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: tepmsensor.proto

package tempsensorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataRequest_Format int32

const (
	DataRequest_F DataRequest_Format = 0
	DataRequest_C DataRequest_Format = 1
)

// Enum value maps for DataRequest_Format.
var (
	DataRequest_Format_name = map[int32]string{
		0: "F",
		1: "C",
	}
	DataRequest_Format_value = map[string]int32{
		"F": 0,
		"C": 1,
	}
)

func (x DataRequest_Format) Enum() *DataRequest_Format {
	p := new(DataRequest_Format)
	*p = x
	return p
}

func (x DataRequest_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataRequest_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_tepmsensor_proto_enumTypes[0].Descriptor()
}

func (DataRequest_Format) Type() protoreflect.EnumType {
	return &file_tepmsensor_proto_enumTypes[0]
}

func (x DataRequest_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataRequest_Format.Descriptor instead.
func (DataRequest_Format) EnumDescriptor() ([]byte, []int) {
	return file_tepmsensor_proto_rawDescGZIP(), []int{0, 0}
}

type DataResponse_Format int32

const (
	DataResponse_F DataResponse_Format = 0
	DataResponse_C DataResponse_Format = 1
)

// Enum value maps for DataResponse_Format.
var (
	DataResponse_Format_name = map[int32]string{
		0: "F",
		1: "C",
	}
	DataResponse_Format_value = map[string]int32{
		"F": 0,
		"C": 1,
	}
)

func (x DataResponse_Format) Enum() *DataResponse_Format {
	p := new(DataResponse_Format)
	*p = x
	return p
}

func (x DataResponse_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataResponse_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_tepmsensor_proto_enumTypes[1].Descriptor()
}

func (DataResponse_Format) Type() protoreflect.EnumType {
	return &file_tepmsensor_proto_enumTypes[1]
}

func (x DataResponse_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataResponse_Format.Descriptor instead.
func (DataResponse_Format) EnumDescriptor() ([]byte, []int) {
	return file_tepmsensor_proto_rawDescGZIP(), []int{1, 0}
}

type DataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session string             `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Format  DataRequest_Format `protobuf:"varint,2,opt,name=format,proto3,enum=tempsensor.DataRequest_Format" json:"format,omitempty"`
}

func (x *DataRequest) Reset() {
	*x = DataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tepmsensor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequest) ProtoMessage() {}

func (x *DataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tepmsensor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequest.ProtoReflect.Descriptor instead.
func (*DataRequest) Descriptor() ([]byte, []int) {
	return file_tepmsensor_proto_rawDescGZIP(), []int{0}
}

func (x *DataRequest) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *DataRequest) GetFormat() DataRequest_Format {
	if x != nil {
		return x.Format
	}
	return DataRequest_F
}

type DataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session string              `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Temp    float32             `protobuf:"fixed32,2,opt,name=temp,proto3" json:"temp,omitempty"`
	Format  DataResponse_Format `protobuf:"varint,3,opt,name=format,proto3,enum=tempsensor.DataResponse_Format" json:"format,omitempty"`
}

func (x *DataResponse) Reset() {
	*x = DataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tepmsensor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataResponse) ProtoMessage() {}

func (x *DataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tepmsensor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataResponse.ProtoReflect.Descriptor instead.
func (*DataResponse) Descriptor() ([]byte, []int) {
	return file_tepmsensor_proto_rawDescGZIP(), []int{1}
}

func (x *DataResponse) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *DataResponse) GetTemp() float32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *DataResponse) GetFormat() DataResponse_Format {
	if x != nil {
		return x.Format
	}
	return DataResponse_F
}

var File_tepmsensor_proto protoreflect.FileDescriptor

var file_tepmsensor_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x65, 0x70, 0x6d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x22, 0x77,
	0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x05, 0x0a, 0x01, 0x46, 0x10, 0x00,
	0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x05, 0x0a, 0x01, 0x46, 0x10, 0x00,
	0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x01, 0x32, 0x55, 0x0a, 0x11, 0x54, 0x65, 0x6d, 0x70, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x10,
	0x5a, 0x0e, 0x2e, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tepmsensor_proto_rawDescOnce sync.Once
	file_tepmsensor_proto_rawDescData = file_tepmsensor_proto_rawDesc
)

func file_tepmsensor_proto_rawDescGZIP() []byte {
	file_tepmsensor_proto_rawDescOnce.Do(func() {
		file_tepmsensor_proto_rawDescData = protoimpl.X.CompressGZIP(file_tepmsensor_proto_rawDescData)
	})
	return file_tepmsensor_proto_rawDescData
}

var file_tepmsensor_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tepmsensor_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_tepmsensor_proto_goTypes = []interface{}{
	(DataRequest_Format)(0),  // 0: tempsensor.DataRequest.Format
	(DataResponse_Format)(0), // 1: tempsensor.DataResponse.Format
	(*DataRequest)(nil),      // 2: tempsensor.DataRequest
	(*DataResponse)(nil),     // 3: tempsensor.DataResponse
}
var file_tepmsensor_proto_depIdxs = []int32{
	0, // 0: tempsensor.DataRequest.format:type_name -> tempsensor.DataRequest.Format
	1, // 1: tempsensor.DataResponse.format:type_name -> tempsensor.DataResponse.Format
	2, // 2: tempsensor.TempSensorService.GetData:input_type -> tempsensor.DataRequest
	3, // 3: tempsensor.TempSensorService.GetData:output_type -> tempsensor.DataResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_tepmsensor_proto_init() }
func file_tepmsensor_proto_init() {
	if File_tepmsensor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tepmsensor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tepmsensor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tepmsensor_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tepmsensor_proto_goTypes,
		DependencyIndexes: file_tepmsensor_proto_depIdxs,
		EnumInfos:         file_tepmsensor_proto_enumTypes,
		MessageInfos:      file_tepmsensor_proto_msgTypes,
	}.Build()
	File_tepmsensor_proto = out.File
	file_tepmsensor_proto_rawDesc = nil
	file_tepmsensor_proto_goTypes = nil
	file_tepmsensor_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TempSensorServiceClient is the client API for TempSensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TempSensorServiceClient interface {
	GetData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (TempSensorService_GetDataClient, error)
}

type tempSensorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTempSensorServiceClient(cc grpc.ClientConnInterface) TempSensorServiceClient {
	return &tempSensorServiceClient{cc}
}

func (c *tempSensorServiceClient) GetData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (TempSensorService_GetDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TempSensorService_serviceDesc.Streams[0], "/tempsensor.TempSensorService/GetData", opts...)
	if err != nil {
		return nil, err
	}
	x := &tempSensorServiceGetDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TempSensorService_GetDataClient interface {
	Recv() (*DataResponse, error)
	grpc.ClientStream
}

type tempSensorServiceGetDataClient struct {
	grpc.ClientStream
}

func (x *tempSensorServiceGetDataClient) Recv() (*DataResponse, error) {
	m := new(DataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TempSensorServiceServer is the server API for TempSensorService service.
type TempSensorServiceServer interface {
	GetData(*DataRequest, TempSensorService_GetDataServer) error
}

// UnimplementedTempSensorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTempSensorServiceServer struct {
}

func (*UnimplementedTempSensorServiceServer) GetData(*DataRequest, TempSensorService_GetDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetData not implemented")
}

func RegisterTempSensorServiceServer(s *grpc.Server, srv TempSensorServiceServer) {
	s.RegisterService(&_TempSensorService_serviceDesc, srv)
}

func _TempSensorService_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TempSensorServiceServer).GetData(m, &tempSensorServiceGetDataServer{stream})
}

type TempSensorService_GetDataServer interface {
	Send(*DataResponse) error
	grpc.ServerStream
}

type tempSensorServiceGetDataServer struct {
	grpc.ServerStream
}

func (x *tempSensorServiceGetDataServer) Send(m *DataResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TempSensorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tempsensor.TempSensorService",
	HandlerType: (*TempSensorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _TempSensorService_GetData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tepmsensor.proto",
}
